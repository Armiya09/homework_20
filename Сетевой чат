#include <iostream>
#include <boost/asio.hpp>
#include <deque>
#include <thread>


using boost::asio::ip::tcp;


class Chat {
public:
    virtual void on_read(const char* data, std::size_t length) = 0;
};


class NetworkChat : public Chat {
public:
    NetworkChat(boost::asio::io_service& io_service, const std::string& host, unsigned short port)
        : io_service_(io_service)
        , socket_(io_service)
        , endpoint_(tcp::endpoint(boost::asio::ip::address::from_string(host), port))
        , server_response_(1024) {}


    void connect() {
        socket_.async_connect(endpoint_, [this](boost::system::error_code ec) {
            if (!ec) {
                std::cout << "Connected to server" << std::endl;
                do_read();
            }
            else {
                std::cerr << "Failed to connect to server: " << ec.message() << std::endl;
            }
        });
    }


    void disconnect() {
        socket_.close();
    }


    void send_message(const std::string& message) {
        io_service_.post(this, message {
            write_buffer_.push_back(message + "\n");
            if (write_buffer_.size() == 1) {
                do_write();
            }
        });
    }


    void on_read(const char* data, std::size_t length) override {
        std::string message(data, length);
        std::cout << message;
    }


private:
    void do_read() {
        socket_.async_read_some(boost::asio::buffer(server_response_),
            [this](boost::system::error_code ec, std::size_t length) {
            if (!ec) {
                on_read(server_response_.data(), length);
                do_read();
            }
            else if (ec != boost::asio::error::eof) {
                std::cerr << "Error reading from server: " << ec.message() << std::endl;
            }
            else {
                std::cout << "Disconnected from server" << std::endl;
                socket_.close();
            }
        });
    }


    void do_write() {
        boost::asio::async_write(socket_, boost::asio::buffer(write_buffer_.front().data(), write_buffer_.front().size()),
            [this](boost::system::error_code ec, std::size_t length) {
            if (!ec) {
                write_buffer_.pop_front();
                if (!write_buffer_.empty()) {
                    do_write();
                }
            }
            else {
                std::cerr << "Error writing to server: " << ec.message() << std::endl;
            }
        });
    }


    boost::asio::io_service& io_service_;
    tcp::socket socket_;
    tcp::endpoint endpoint_;
    std::array<char, 1024> server_response_;
    std::deque<std::string> write_buffer_;
};


void print_usage() {
    std::cout << "Usage: chat_client <host> <port>" << std::endl;
}


int main(int argc, char* argv[]) {
    if (argc != 3) {
        print_usage();
        return 1;
    }


    boost::asio::io_service io_service;
    NetworkChat client(io_service, argv[1], std::atoi(argv[2]));
    client.connect();


    std::thread t(&io_service {
        io_service.run();
    });


    std::string message;


    while (std::getline(std::cin, message)) {
        if (message == "/quit") {
            break;
        }
        client.send_message(message);
    }


    client.disconnect();
    t.join();


    return 0;
}
